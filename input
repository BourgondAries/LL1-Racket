(; This is a comment)
(string This is a string, anything goes. To insert a parenthesis just do (lp) or (rp), it's interpreted by the string macro
and it inserts left-parens or right parens for you, also newlines are ignored. The best way to insert extra spaces is to
write (space)(space) like that.)

(; So you kinda get the feeling that only ( and ) are truly special, in a comment macro, () are just ignored, but they must still match!)
(` This is a quasiquote. It quotes stuff. (, this unquotes stuff))
(' This is a single quote. The simplest one, it's equivalent to other lisp's (string '(lp)stuff(rp)))

(math
	a^3 = 30 (nl)
	(pow a^3 1/3) = (pow 30 1/3) (nl))

This is the lisp I want to see. The best lisp. A true computable lambda calculus.

How do we now interpret the machine?
One way of doing it is to say well we have an environment that we manipulate. But how do we fold and run lambdas?

	name -> value

a value can be a function too so (name 1 2) is a function call.
When encountering the function call to (;) we simply skip the entire list.
What about defining functions?
(fn x (a b c)
    (print a))

so what do we do about this?
One possibility is to simply add it to the environment, but what kind of object do we make?
)
